{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adon\\\\Desktop\\\\full stack dev\\\\COVID-LIVE-master\\\\src\\\\LineGraph.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\nconst casesTypeColors = {\n  cases: {\n    hex: \"#a820df\",\n    rgb: \"rgb(169, 32, 223)\",\n    half_op: \"rgb(169, 32, 223,0.5)\",\n    multiplier: 800\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgba(251,68,67)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000\n  }\n};\n\nconst LineGraph = ({\n  casesType = \"cases\",\n  ...props\n}) => {\n  const [data, setData] = useState({});\n\n  const buildChartData = data => {\n    const chartData = [];\n    let lastDataPoint;\n    console.log(\"Data in line graph -->>\", data);\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\").then(response => response.json()).then(data => {\n        const chartData = buildChartData(data);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    options: options,\n    data: {\n      datasets: [{\n        borderColor: casesTypeColors[casesType].hex,\n        backgroundColor: casesTypeColors[casesType].half_op,\n        data: data\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default LineGraph;","map":{"version":3,"sources":["C:/Users/Adon/Desktop/full stack dev/COVID-LIVE-master/src/LineGraph.jsx"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","LineGraph","casesType","props","setData","buildChartData","chartData","lastDataPoint","console","log","date","newDataPoint","x","y","push","fetchData","fetch","then","response","json","className","length","datasets","borderColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\nconst casesTypeColors = {\n  cases: {\n    hex: \"#a820df\",\n    rgb: \"rgb(169, 32, 223)\",\n    half_op: \"rgb(169, 32, 223,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgba(251,68,67)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  }\n};\nconst LineGraph = ({ casesType = \"cases\", ...props }) => {\n  const [data, setData] = useState({});\n  const buildChartData = (data) => {\n    const chartData = [];\n    let lastDataPoint;\n    console.log(\"Data in line graph -->>\", data);\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\")\n        .then((response) => response.json())\n        .then((data) => {\n          const chartData = buildChartData(data);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                borderColor:  casesTypeColors[casesType].hex,\n                backgroundColor: casesTypeColors[casesType].half_op,\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;"]},"metadata":{},"sourceType":"module"}