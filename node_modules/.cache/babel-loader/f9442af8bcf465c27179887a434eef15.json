{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adon\\\\Desktop\\\\full stack dev\\\\COVID-LIVE-master\\\\src\\\\util.js\";\nimport React from 'react';\nimport numeral from \"numeral\";\nimport { Circle, Popup } from 'react-leaflet';\nconst casesTypeColors = {\n  cases: {\n    hex: \"#a820df\",\n    rgb: \"rgb(169, 32, 223)\",\n    half_op: \"rgb(169, 32, 223,0.5)\",\n    multiplier: 800\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200\n  },\n  deaths: {\n    hex: \"##FF0000\",\n    rgb: \"rgba(255,0,0)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000\n  }\n};\nexport const prettyPrintStat = stat => stat ? `${numeral(stat).format(\"0.0a\")}` : \"+0\";\nexport const sortData = data => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\nexport const showDataOnMap = (data, casesType = 'cases') => data.map(country => /*#__PURE__*/React.createElement(Circle, {\n  center: [country.countryInfo.lat, country.countryInfo.long],\n  fillOpacity: 0.4,\n  color: casesTypeColors[casesType].hex,\n  fillColor: casesTypeColors[casesType].hex,\n  radius: Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(Popup, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-flag\",\n  style: {\n    backgroundImage: `url(${country.countryInfo.flag})`\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-name\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 11\n  }\n}, country.country), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-confirmed\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 11\n  }\n}, \"Cases:\", numeral(country.cases).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-recovered\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 11\n  }\n}, \"Recovered:\", numeral(country.recovered).format(\"0,0\"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-deaths\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 11\n  }\n}, \"Deaths: \", numeral(country.deaths).format(\"0,0\"))))));","map":{"version":3,"sources":["C:/Users/Adon/Desktop/full stack dev/COVID-LIVE-master/src/util.js"],"names":["React","numeral","Circle","Popup","casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","format","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","countryInfo","lat","long","Math","sqrt","backgroundImage","flag"],"mappings":"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","sourcesContent":["import React from 'react';\nimport numeral from \"numeral\";\nimport {Circle,Popup} from 'react-leaflet';\n\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#a820df\",\n    rgb: \"rgb(169, 32, 223)\",\n    half_op: \"rgb(169, 32, 223,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"##FF0000\",\n    rgb: \"rgba(255,0,0)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  },\n};\nexport const prettyPrintStat = (stat) =>\n  stat ? `${numeral(stat).format(\"0.0a\")}` : \"+0\";\n  \nexport const sortData = (data)=>{\n    const sortedData=[...data];\n    sortedData.sort((a,b)=>{\n        if(a.cases>b.cases){\n            return -1;\n        }\n        else{\n            return 1;\n        }\n    })\n    return sortedData;\n}\n\nexport const showDataOnMap=(data,casesType='cases')=>(\ndata.map(country=>(\n<Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n\n<Popup>\n        <div className='info-container'>\n          <div\n            className='info-flag'\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className='info-name'>{country.country}</div>\n          <div className='info-confirmed'>\n            Cases:{numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className='info-recovered'>\n            Recovered:{numeral(country.recovered).format(\"0,0\")}{\" \"}\n          </div>\n          <div className='info-deaths'>\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n\n\n    </Circle>\n))\n);\n"]},"metadata":{},"sourceType":"module"}