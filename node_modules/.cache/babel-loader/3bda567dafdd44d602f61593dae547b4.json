{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Adon\\\\Desktop\\\\full stack dev\\\\COVID-LIVE-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Adon\\\\Desktop\\\\full stack dev\\\\COVID-LIVE-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Adon\\\\Desktop\\\\full stack dev\\\\COVID-LIVE-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{MenuItem,FormControl,Select,Card,CardContent}from\"@material-ui/core\";import{sortData,prettyPrintStat}from\"./util\";import InfoBox from'./InfoBox';import Map from'./Map';import Table from'./Table';import LineGraph from'./LineGraph';import Footer from'./Footer';import'./App.css';import\"leaflet/dist/leaflet.css\";//https://disease.sh/v3/covid-19/countries\nfunction App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];var _useState3=useState(\"Bangladesh\"),_useState4=_slicedToArray(_useState3,2),country=_useState4[0],setCountry=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),countryInfo=_useState6[0],setCountryInfo=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),tableData=_useState8[0],setTableData=_useState8[1];var _useState9=useState({lat:23.685,lng:90.3563}),_useState10=_slicedToArray(_useState9,2),mapCenter=_useState10[0],setMapCenter=_useState10[1];var _useState11=useState(5.2,50),_useState12=_slicedToArray(_useState11,2),mapZoom=_useState12[0],setMapZoom=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),mapCountries=_useState14[0],setMapCountries=_useState14[1];var _useState15=useState(\"cases\"),_useState16=_slicedToArray(_useState15,2),casesType=_useState16[0],setCasesType=_useState16[1];useEffect(function(){fetch(\"https://disease.sh/v3/covid-19/countries/BANGLADESH\").then(function(response){return response.json();}).then(function(data){setCountryInfo(data);});},[]);useEffect(function(){var getCountriesData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();}).then(function(data){var countries=data.map(function(country){return{name:country.country,value:country.countryInfo.iso2};});var sortedData=sortData(data);setTableData(sortedData);setMapCountries(data);setCountries(countries);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getCountriesData(){return _ref.apply(this,arguments);};}();getCountriesData();},[]);var onCountryChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event){var countryCode,url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:countryCode=event.target.value;url=countryCode===\"Bangladesh\"?\"https://disease.sh/v3/covid-19/countries/BANGLADESH\":\"https://disease.sh/v3/covid-19/countries/\".concat(countryCode);_context2.next=4;return fetch(url).then(function(response){return response.json();}).then(function(data){setCountry(countryCode);setCountryInfo(data);countryCode===\"Bangladesh\"?setMapCenter([23.685,90.3563]):setMapCenter([data.countryInfo.lat,data.countryInfo.long]);setMapCenter([data.countryInfo.lat,data.countryInfo.long]);});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function onCountryChange(_x){return _ref2.apply(this,arguments);};}();console.log(countryInfo);return/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app_left\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app_header\"},/*#__PURE__*/React.createElement(\"h2\",null,\"COVID-19 Today\"),/*#__PURE__*/React.createElement(FormControl,{className:\"app__dropdown\"},/*#__PURE__*/React.createElement(Select,{variant:\"outlined\",onChange:onCountryChange,value:country},/*#__PURE__*/React.createElement(MenuItem,{value:\"Bangladesh\"},\"Bangladesh\"),countries.map(function(country){return/*#__PURE__*/React.createElement(MenuItem,{value:country.value},country.name);})))),/*#__PURE__*/React.createElement(\"div\",{className:\"app__stats\"},/*#__PURE__*/React.createElement(InfoBox,{isRed:true,active:casesType===\"cases\",onClick:function onClick(e){return setCasesType(\"cases\");},title:\"Cases\",cases:prettyPrintStat(countryInfo.todayCases),total:prettyPrintStat(countryInfo.cases)}),/*#__PURE__*/React.createElement(InfoBox,{title:\"Recovered\",active:casesType===\"recovered\",onClick:function onClick(e){return setCasesType(\"recovered\");},cases:prettyPrintStat(countryInfo.todayRecovered),total:prettyPrintStat(countryInfo.recovered)}),/*#__PURE__*/React.createElement(InfoBox,{isRed:true,active:casesType===\"deaths\",onClick:function onClick(e){return setCasesType(\"deaths\");},title:\"Deaths\",cases:prettyPrintStat(countryInfo.todayDeaths),total:prettyPrintStat(countryInfo.deaths)})),/*#__PURE__*/React.createElement(Map,{casesType:casesType,countries:mapCountries,center:mapCenter,zoom:mapZoom})),/*#__PURE__*/React.createElement(\"div\",{className:\"app__right\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(\"h3\",null,\"Live cases by Country\"),/*#__PURE__*/React.createElement(Table,{countries:tableData}),/*#__PURE__*/React.createElement(\"h3\",{className:\"app__graphTitle\"},\"WorldWide new \",casesType),/*#__PURE__*/React.createElement(LineGraph,{className:\"app__graph\",casesType:casesType}))),/*#__PURE__*/React.createElement(Footer,null)));}export default App;","map":{"version":3,"sources":["C:/Users/Adon/Desktop/full stack dev/COVID-LIVE-master/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","sortData","prettyPrintStat","InfoBox","Map","Table","LineGraph","Footer","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","casesType","setCasesType","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","long","console","log","e","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport{\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table'\nimport LineGraph from './LineGraph'\nimport Footer from './Footer';\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\n\n\n//https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries,setCountries]=useState([]);\n  const [country,setCountry]=useState(\"Bangladesh\");\n  const [countryInfo,setCountryInfo]=useState({\n  });\n  const [tableData,setTableData] =useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 23.685, lng: 90.3563 });\n  const [mapZoom, setMapZoom] = useState(5.2,50);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(()=>{\n  fetch(\"https://disease.sh/v3/covid-19/countries/BANGLADESH\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  },[])\n\nuseEffect(()=>{\nconst getCountriesData=async()=>{\nawait fetch (\"https://disease.sh/v3/covid-19/countries\")\n.then((response)=>response.json())\n.then((data)=>{\n  const countries=data.map((country)=>(\n    {\n      name:country.country,\n      value:country.countryInfo.iso2\n    }\n  ));\n\n  const sortedData=sortData(data)\n  setTableData(sortedData);\n  setMapCountries(data);\n  setCountries(countries);\n})\n}\ngetCountriesData();\n},[]);\n\nconst onCountryChange =async (event) => {\n  const countryCode=event.target.value;\n \nconst url =\n  countryCode === \"Bangladesh\"\n    ? \"https://disease.sh/v3/covid-19/countries/BANGLADESH\"\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\nawait fetch(url)\n.then(response=>response.json())\n.then(data=>{\n  setCountry(countryCode);\n  setCountryInfo(data)\n\n  countryCode === \"Bangladesh\"\n    ? setMapCenter([23.685, 90.3563])\n    : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n  setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n})\n\n};\n\nconsole.log(countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h2>COVID-19 Today</h2>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"Bangladesh\">Bangladesh</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n\n              {/* <MenuItem value=\"Bangladesh\">Bangladesh</MenuItem>\n    <MenuItem value=\"Bangladesh\">option 2</MenuItem>\n    <MenuItem value=\"Bangladesh\">option 3</MenuItem>\n  <MenuItem value=\"Bangladesh\">yo id no</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <div className=\"app__right\">\n        <Card>\n          <CardContent>\n            <h3>Live cases by Country</h3>\n            <Table countries={tableData} />\n            {/* <h3>Bangladesh new {casesType}</h3>\n<LineGraph */}\n            <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </CardContent>\n        </Card>\n\n        <Footer />\n      </div>\n    </div>\n  );\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}