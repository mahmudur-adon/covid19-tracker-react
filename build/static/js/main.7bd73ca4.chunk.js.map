{"version":3,"sources":["util.js","InfoBox.jsx","Map.jsx","Table.jsx","LineGraph.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","InfoBox","title","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","src","height","width","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","console","log","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","borderColor","backgroundColor","Footer","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7bd73ca4.chunk.js","sourcesContent":["import React from 'react';\nimport numeral from \"numeral\";\nimport {Circle,Popup} from 'react-leaflet';\n\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#a820df\",\n    rgb: \"rgb(169, 32, 223)\",\n    half_op: \"rgb(169, 32, 223,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"##FF0000\",\n    rgb: \"rgba(255,0,0)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  },\n};\nexport const prettyPrintStat = (stat) =>\n  stat ? `${numeral(stat).format(\"0.0a\")}` : \"+0\";\n  \nexport const sortData = (data)=>{\n    const sortedData=[...data];\n    sortedData.sort((a,b)=>{\n        if(a.cases>b.cases){\n            return -1;\n        }\n        else{\n            return 1;\n        }\n    })\n    return sortedData;\n}\n\nexport const showDataOnMap=(data,casesType='cases')=>(\ndata.map(country=>(\n<Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n\n<Popup>\n        <div className='info-container'>\n          <div\n            className='info-flag'\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className='info-name'>{country.country}</div>\n          <div className='info-confirmed'>\n            Cases:{numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className='info-recovered'>\n            Recovered:{numeral(country.recovered).format(\"0,0\")}{\" \"}\n          </div>\n          <div className='info-deaths'>\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n\n\n    </Circle>\n))\n);\n","import React from 'react';\nimport \"./InfoBox.css\";\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\nfunction InfoBox({title,cases,isRed,active,total, ...props}) {\n    return (\n      <Card\n        onClick={props.onClick}\n        className={`infoBox ${active && \"infoBox--selected\"} ${\n          isRed && \"infoBox--red\"\n        }`}\n      >\n        <CardContent>\n          <Typography className=\"infoBox__title\" color=\"textSecondary\">\n            {title}\n          </Typography>\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n            {cases} Today\n          </h2>\n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography >\n        </CardContent>\n      </Card>\n    );\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport  \"./Map.css\";\n import { showDataOnMap } from \"./util\";\nfunction Map({countries,casesType,center,zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n            <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport './Table.css';\nimport numeral from \"numeral\";\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country,cases,countryInfo })=>(\n             \n                <tr>\n                    <td>\n                        <div\n                         className='info-fla'\n                        >\n\n                        <img src={countryInfo.flag } style={{height:\"26px\",width:\"38px\"}}/>\n                       \n                        </div>\n                        </td>\n                    <td>{country}</td>\n                    <td>\n                    <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\nconst casesTypeColors = {\n  cases: {\n    hex: \"#a820df\",\n    rgb: \"rgb(169, 32, 223)\",\n    half_op: \"rgb(169, 32, 223,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgba(251,68,67)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  }\n};\nconst LineGraph = ({ casesType = \"cases\", ...props }) => {\n  const [data, setData] = useState({});\n  const buildChartData = (data) => {\n    const chartData = [];\n    let lastDataPoint;\n    console.log(\"Data in line graph -->>\", data);\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          const chartData = buildChartData(data);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                borderColor:  casesTypeColors[casesType].hex,\n                backgroundColor: casesTypeColors[casesType].half_op,\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;","import React from \"react\";\nimport \"./footer.css\";\nfunction Footer() {\n  return <div className=\"footer\">Made with 🔥React by Md. Mahmudur Rahman</div>;\n}\n\nexport default Footer;\n","import React,{useState, useEffect} from 'react';\nimport{\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table'\nimport LineGraph from './LineGraph'\nimport Footer from './Footer';\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\n\n\n//https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries,setCountries]=useState([]);\n  const [country,setCountry]=useState(\"Bangladesh\");\n  const [countryInfo,setCountryInfo]=useState({\n  });\n  const [tableData,setTableData] =useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 23.685, lng: 90.3563 });\n  const [mapZoom, setMapZoom] = useState(5.2,50);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(()=>{\n  fetch(\"https://disease.sh/v3/covid-19/countries/BANGLADESH\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  },[])\n\nuseEffect(()=>{\nconst getCountriesData=async()=>{\nawait fetch (\"https://disease.sh/v3/covid-19/countries\")\n.then((response)=>response.json())\n.then((data)=>{\n  const countries=data.map((country)=>(\n    {\n      name:country.country,\n      value:country.countryInfo.iso2\n    }\n  ));\n\n  const sortedData=sortData(data)\n  setTableData(sortedData);\n  setMapCountries(data);\n  setCountries(countries);\n})\n}\ngetCountriesData();\n},[]);\n\nconst onCountryChange =async (event) => {\n  const countryCode=event.target.value;\n \nconst url =\n  countryCode === \"Bangladesh\"\n    ? \"https://disease.sh/v3/covid-19/countries/BANGLADESH\"\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\nawait fetch(url)\n.then(response=>response.json())\n.then(data=>{\n  setCountry(countryCode);\n  setCountryInfo(data)\n\n  countryCode === \"Bangladesh\"\n    ? setMapCenter([23.685, 90.3563])\n    : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n  setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n})\n\n};\n\nconsole.log(countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h2>COVID-19 Today</h2>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"Bangladesh\">Bangladesh</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n\n              {/* <MenuItem value=\"Bangladesh\">Bangladesh</MenuItem>\n    <MenuItem value=\"Bangladesh\">option 2</MenuItem>\n    <MenuItem value=\"Bangladesh\">option 3</MenuItem>\n  <MenuItem value=\"Bangladesh\">yo id no</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <div className=\"app__right\">\n        <Card>\n          <CardContent>\n            <h3>Live cases by Country</h3>\n            <Table countries={tableData} />\n            {/* <h3>Bangladesh new {casesType}</h3>\n<LineGraph */}\n            <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </CardContent>\n        </Card>\n\n        <Footer />\n      </div>\n    </div>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}